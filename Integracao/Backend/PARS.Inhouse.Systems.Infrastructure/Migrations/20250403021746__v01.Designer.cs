// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PARS.Inhouse.Systems.Infrastructure.Data.DbContext.SQLSERVE;

#nullable disable

namespace PARS.Inhouse.Systems.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250403021746__v01")]
    partial class _v01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnyPointMenuAnyPointPermissao", b =>
                {
                    b.Property<int>("MenusId")
                        .HasColumnType("int");

                    b.Property<int>("PermissoesId")
                        .HasColumnType("int");

                    b.HasKey("MenusId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("AnyPointMenuAnyPointPermissao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.AutorizacaoEndpoints.AnyPointUserEndpointPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("AnyPointUserEndpointPermission");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.CadastroIntegracoes.AnyPointCadastroIntegracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjetoDestino")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjetoOrigem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnyPointCadastroIntegracao");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<double?>("Position")
                        .HasColumnType("float");

                    b.Property<string>("Rota")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AnyPointMenu");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenuPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("PermissaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissaoId");

                    b.ToTable("AnyPointMenuPermissao");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnyPointPermissao");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissaoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPermissao")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissaoId");

                    b.ToTable("AnyPointPermissaoUsuario");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("PodeEscrever")
                        .HasColumnType("bit");

                    b.Property<bool>("PodeLer")
                        .HasColumnType("bit");

                    b.Property<bool>("PodeRemover")
                        .HasColumnType("bit");

                    b.Property<bool>("PodeVerConfiguracoes")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Templates.TemplatePlanilhaCampos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CampoFixo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColunaBanco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColunaPlanilha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetraColunaPlanilha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomePersonalizadoColunaPlanilha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreencherCampoEmBranco")
                        .HasColumnType("bit");

                    b.Property<bool>("PreencherCampoFixo")
                        .HasColumnType("bit");

                    b.Property<int>("TemplatesPlanilhaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplatesPlanilhaId");

                    b.ToTable("TemplatesPlanilhaCampos");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Templates.TemplatesPlanilha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TemplatesPlanilha");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.DeParaEmpresas.DeParaEmpresas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeParaEmpresas");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.DeParaVexpensesBimmer.DeParaVexpensesBimmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoItemDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoItemOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescricaoItemDestino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescricaoItemOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjetoOrigem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeParaVexpensesBimmer");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.IntegracaoBimmerVexpense.IntegracaoBimmerHistoricoErrosInsercoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataTentativa")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tentativas")
                        .HasColumnType("bigint");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IntegracaoBimmerHistoricoErrosInsercoes");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.IntegracaoBimmerVexpense.IntegracaoBimmerInsercaoPendentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("IntegracaoBimmerInsercaoPendentes");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.IntegracaoBimmerVexpense.TituloPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentificadorBimmer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TitulosPagos");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.Vexpense.TituloAprovadoDespesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConvertedCurrencyIso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ConvertedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("IdResponse")
                        .HasColumnType("int");

                    b.Property<int?>("IdTituloAprovado")
                        .HasColumnType("int");

                    b.Property<int?>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<string>("Mileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MileageValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("On")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalCurrencyIso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayingCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("ReiceptUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Reimbursable")
                        .HasColumnType("bit");

                    b.Property<int?>("Rejected")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Validate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdTituloAprovado");

                    b.ToTable("TituloAprovadoDespesa");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.Vexpense.TitulosAprovados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Approval_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Approval_stage_id")
                        .HasColumnType("int");

                    b.Property<int?>("Approval_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Device_id")
                        .HasColumnType("int");

                    b.Property<string>("Excel_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdResponse")
                        .HasColumnType("int");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("On")
                        .HasColumnType("bit");

                    b.Property<int?>("Paying_company_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Payment_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Payment_method_id")
                        .HasColumnType("int");

                    b.Property<string>("Pdf_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TitulosAprovados");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Shared.DTOs.AnyPoint.User.Solicitacoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Solicitacoes");
                });

            modelBuilder.Entity("AnyPointMenuAnyPointPermissao", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.AutorizacaoEndpoints.AnyPointUserEndpointPermission", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenuPermissao", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissao", "Permissao")
                        .WithMany()
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissaoUsuario", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointPermissao", "Permissao")
                        .WithMany()
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Templates.TemplatePlanilhaCampos", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Templates.TemplatesPlanilha", "TemplatesPlanilha")
                        .WithMany()
                        .HasForeignKey("TemplatesPlanilhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplatesPlanilha");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.Vexpense.TituloAprovadoDespesa", b =>
                {
                    b.HasOne("PARS.Inhouse.Systems.Domain.Entities.Integracoes.Vexpenses_Bimmer.Vexpense.TitulosAprovados", "TitulosAprovados")
                        .WithMany()
                        .HasForeignKey("IdTituloAprovado");

                    b.Navigation("TitulosAprovados");
                });

            modelBuilder.Entity("PARS.Inhouse.Systems.Domain.Entities.AnyPoint.Menu.AnyPointMenu", b =>
                {
                    b.Navigation("SubMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
